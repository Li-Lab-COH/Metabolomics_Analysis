#
# # Subset the data
# non_constant_metlData_tp <- metlData_tp[row_pass_filter, , drop = FALSE]
#
# # Track the metabolites that failed
# low_var_metabolites[[tp]] <- rownames(metlData_tp)[!row_pass_filter]
# Removing weird metabolites
keep_rows <- ! rownames(metlData_tp) %in% metabolites_to_remove
non_constant_metlData_tp <- metlData_tp[keep_rows, , drop = FALSE]
# Apply t.test for each metabolite (each row)
# ttest_out <- t(apply(metlData_tp, 1, run_ttest, group = group_vec, paired = FALSE, timePoint = tp))
ttest_out <- t(sapply(seq_len(nrow(non_constant_metlData_tp)), function(i) {
metab <- rownames(non_constant_metlData_tp)[i]
run_ttest(
x          = non_constant_metlData_tp[i, ],
group      = group_vec,
paired     = FALSE,
timePoint  = tp,
metabolite = metab
)
}))
ttest_out <- as.data.frame(ttest_out)
# For consistency, add row names as a column and process them:
ttest_out$RowID <- rownames(ttest_out)
rownames(ttest_out) <- NULL
# Split the RowID into Index and Compound
split_names <- strsplit(ttest_out$RowID, "\\|")
ttest_out$Index <- sapply(split_names, `[`, 1)
ttest_out$Compound <- sapply(split_names, function(x) paste(x[-1], collapse="|"))
ttest_out$RowID <- NULL
# Merge with metabolite metadata
merged_ttest <- merge(metabolite_meta_data, ttest_out, by = "Index", all.y = TRUE)
# Save results file
outfile <- file.path("~/Roselab/Metabolite/results/difference/t_test/intraArm",
paste0("t_test_intraArm_", tp, "_IF_vs_NIF.csv"))
write.csv(merged_ttest, file = outfile, row.names = FALSE)
message("T.test results saved: ", outfile)
}
for(tp in timepoints_of_interest_ttest){
message("Running t.test intraArm analysis for time point: ", tp)
meta_tp <- metaSubset[metaSubset$Time == tp, ]
# print(meta_tp)
metlData_tp <- metlData_log2_filtered[, meta_tp$Sample_ID, drop = FALSE]
# Group vector from metadata
group_vec <- factor(as.character(meta_tp$Arm), levels = c("NIF", "IF"))
# print("Here is the group_vec")
# print(group_vec)
# print(head(metlData_tp))
# print("Removing metabolites with 0 variance")
# Filter out metabolites (rows) with zero variance in either group
# Precompute which rows pass the variance filter
# row_pass_filter <- apply(metlData_tp, 1, function(x) {
#   group1 <- x[group_vec == levels(group_vec)[1]]
#   group2 <- x[group_vec == levels(group_vec)[2]]
#   var1 <- var(group1, na.rm = TRUE)
#   var2 <- var(group2, na.rm = TRUE)
#   var1 > 0 && var2 > 0
# })
#
# # Subset the data
# non_constant_metlData_tp <- metlData_tp[row_pass_filter, , drop = FALSE]
#
# # Track the metabolites that failed
# low_var_metabolites[[tp]] <- rownames(metlData_tp)[!row_pass_filter]
# Removing weird metabolites
keep_rows <- ! rownames(metlData_tp) %in% metabolites_to_remove
non_constant_metlData_tp <- metlData_tp[keep_rows, , drop = FALSE]
# Apply t.test for each metabolite (each row)
# ttest_out <- t(apply(metlData_tp, 1, run_ttest, group = group_vec, paired = FALSE, timePoint = tp))
ttest_out <- t(sapply(seq_len(nrow(non_constant_metlData_tp)), function(i) {
metab <- rownames(non_constant_metlData_tp)[i]
run_ttest(
x          = non_constant_metlData_tp[i, ],
group      = group_vec,
paired     = FALSE,
timePoint  = tp,
metabolite = metab
)
}))
ttest_out <- as.data.frame(ttest_out)
# For consistency, add row names as a column and process them:
ttest_out$RowID <- rownames(ttest_out)
rownames(ttest_out) <- NULL
# Split the RowID into Index and Compound
split_names <- strsplit(ttest_out$RowID, "\\|")
ttest_out$Index <- sapply(split_names, `[`, 1)
ttest_out$Compound <- sapply(split_names, function(x) paste(x[-1], collapse="|"))
ttest_out$RowID <- NULL
# Merge with metabolite metadata
merged_ttest <- merge(metabolite_meta_data, ttest_out, by = "Index", all.y = TRUE)
# Save results file
outfile <- file.path("~/Roselab/Metabolite/results/difference/t_test/intraArm",
paste0("t_test_intraArm_", tp, "_IF_vs_NIF.csv"))
write.csv(merged_ttest, file = outfile, row.names = FALSE)
message("T.test results saved: ", outfile)
}
for(tp in timepoints_of_interest_ttest){
message("Running t.test intraArm analysis for time point: ", tp)
meta_tp <- metaSubset[metaSubset$Time == tp, ]
# print(meta_tp)
metlData_tp <- metlData_log2_filtered[, meta_tp$Sample_ID, drop = FALSE]
# Group vector from metadata
group_vec <- factor(as.character(meta_tp$Arm), levels = c("NIF", "IF"))
# print("Here is the group_vec")
# print(group_vec)
# print(head(metlData_tp))
# print("Removing metabolites with 0 variance")
# Filter out metabolites (rows) with zero variance in either group
# Precompute which rows pass the variance filter
# row_pass_filter <- apply(metlData_tp, 1, function(x) {
#   group1 <- x[group_vec == levels(group_vec)[1]]
#   group2 <- x[group_vec == levels(group_vec)[2]]
#   var1 <- var(group1, na.rm = TRUE)
#   var2 <- var(group2, na.rm = TRUE)
#   var1 > 0 && var2 > 0
# })
#
# # Subset the data
# non_constant_metlData_tp <- metlData_tp[row_pass_filter, , drop = FALSE]
#
# # Track the metabolites that failed
# low_var_metabolites[[tp]] <- rownames(metlData_tp)[!row_pass_filter]
# Removing weird metabolites
keep_rows <- ! rownames(metlData_tp) %in% metabolites_to_remove
non_constant_metlData_tp <- metlData_tp[keep_rows, , drop = FALSE]
# Apply t.test for each metabolite (each row)
# ttest_out <- t(apply(metlData_tp, 1, run_ttest, group = group_vec, paired = FALSE, timePoint = tp))
ttest_out <- t(sapply(seq_len(nrow(non_constant_metlData_tp)), function(i) {
metab <- rownames(non_constant_metlData_tp)[i]
run_ttest(
x          = non_constant_metlData_tp[i, ],
group      = group_vec,
paired     = FALSE,
timePoint  = tp,
metabolite = metab
)
}))
ttest_out <- as.data.frame(ttest_out)
# For consistency, add row names as a column and process them:
ttest_out$RowID <- rownames(ttest_out)
rownames(ttest_out) <- NULL
# Split the RowID into Index and Compound
split_names <- strsplit(ttest_out$RowID, "\\|")
ttest_out$Index <- sapply(split_names, `[`, 1)
ttest_out$Compound <- sapply(split_names, function(x) paste(x[-1], collapse="|"))
ttest_out$RowID <- NULL
# Merge with metabolite metadata
merged_ttest <- merge(metabolite_meta_data, ttest_out, by = "Index", all.y = TRUE)
# Save results file
outfile <- file.path("~/Roselab/Metabolite/results/difference/t_test/intraArm",
paste0("t_test_intraArm_", tp, "_IF_vs_NIF.csv"))
write.csv(merged_ttest, file = outfile, row.names = FALSE)
message("T.test results saved: ", outfile)
}
metaSubset$Time
meta_tp <- metaSubset[metaSubset$Time == "D5", ]
meta_tp
metlData_tp <- metlData_log2_filtered[, meta_tp$Sample_ID, drop = FALSE]
metlData_tp
meta_tp
colnames(meta_tp)
colnames(metlData_tp)
group_vec <- factor(as.character(meta_tp$Arm), levels = c("NIF", "IF"))
group_vec
# print(meta_tp)
metlData_tp <- metlData_log2_filtered[, meta_tp$Sample_ID, drop = FALSE]
metlData_tp
meta_tp
metlData_tp
group_vec
metlData_tp
metlData_tp[1]
metlData_tp[1,]
# Extract metabolite values (row 1) and make it numeric
met_values <- as.numeric(metlData_tp[1, ])
met_values
names(met_values) <- colnames(metlData_tp)  # keep sample IDs
met_values
# Sanity check: make sure lengths match
stopifnot(length(met_values) == length(group_vec))
# Sanity check: make sure lengths match
length(met_values) == length(group_vec)
tt <- t.test(met_values ~ group_vec, paired = FALSE)
# Split into two groups manually
group1 <- met_values[group_vec == "NIF"]
group1
group2 <- met_values[group_vec == "IF"]
# Run the unpaired t-test
tt <- t.test(group1, group2, paired = FALSE)
tt
pvals <- sapply(1:nrow(metlData_tp), function(i) {
t.test( metlData_tp[i, group_vec=="NIF"],
metlData_tp[i, group_vec=="IF"],
paired = FALSE )$p.value
})
pvals
meta_tp <- metaSubset[metaSubset$Time == "F3", ]
metlData_tp <- metlData_log2_filtered[, meta_tp$Sample_ID, drop = FALSE]
group_vec <- factor(as.character(meta_tp$Arm), levels = c("NIF", "IF"))
# Extract metabolite values (row 1) and make it numeric
met_values <- as.numeric(metlData_tp[1, ])
names(met_values) <- colnames(metlData_tp)  # keep sample IDs
# Split into two groups manually
group1 <- met_values[group_vec == "NIF"]
group2 <- met_values[group_vec == "IF"]
# Run the unpaired t-test
tt <- t.test(group1, group2, paired = FALSE)
pvals <- sapply(1:nrow(metlData_tp), function(i) {
t.test( metlData_tp[i, group_vec=="NIF"],
metlData_tp[i, group_vec=="IF"],
paired = FALSE )$p.value
})
results <- data.frame(
Metabolite = character(),
t.stat     = numeric(),
p.value    = numeric(),
stringsAsFactors = FALSE
)
# loop over each metabolite (row)
for (i in seq_len(nrow(metlData_tp))) {
met_name <- rownames(metlData_tp)[i]
group1   <- metlData_tp[i, group_vec == "NIF"]
group2   <- metlData_tp[i, group_vec == "IF"]
# 1) print the metabolite name
cat("----- Testing:", met_name, "-----\n")
# 2) print the raw values
cat("  NIF:", paste0(round(group1, 3), collapse = ", "), "\n")
cat("   IF:", paste0(round(group2, 3), collapse = ", "), "\n")
# 3) run the t-test
tt <- t.test(group1, group2, paired = FALSE)
cat(sprintf("  t = %.3f, p = %.4g\n\n", tt$statistic, tt$p.value))
# 4) append to results
results <- rbind(
results,
data.frame(
Metabolite = met_name,
t.stat     = unname(tt$statistic),
p.value    = tt$p.value,
stringsAsFactors = FALSE
)
)
}
# pvals <- sapply(1:nrow(metlData_tp), function(i) {
#   t.test( metlData_tp[i, group_vec=="NIF"],
#           metlData_tp[i, group_vec=="IF"],
#           paired = FALSE )$p.value
# })
metabolites_to_remove <- scan(
"~/Roselab/Metabolite/data/data_for_analysis/metabolites_to_remove.txt",
what = character(),
sep  = "\n",
quiet= TRUE
)
results <- data.frame(
Metabolite = character(),
t.stat     = numeric(),
p.value    = numeric(),
stringsAsFactors = FALSE
)
# loop over each metabolite (row)
for (i in seq_len(nrow(metlData_tp))) {
met_name <- rownames(metlData_tp)[i]
# Skip if in the removal list
if (met_name %in% metabolites_to_remove) {
cat("Skipping:", met_name, "(in removal list)\n")
next
}
group1   <- metlData_tp[i, group_vec == "NIF"]
group2   <- metlData_tp[i, group_vec == "IF"]
# 1) print the metabolite name
cat("----- Testing:", met_name, "-----\n")
# 2) print the raw values
cat("  NIF:", paste0(round(group1, 3), collapse = ", "), "\n")
cat("   IF:", paste0(round(group2, 3), collapse = ", "), "\n")
# 3) run the t-test
tt <- t.test(group1, group2, paired = FALSE)
cat(sprintf("  t = %.3f, p = %.4g\n\n", tt$statistic, tt$p.value))
# 4) append to results
results <- rbind(
results,
data.frame(
Metabolite = met_name,
t.stat     = unname(tt$statistic),
p.value    = tt$p.value,
stringsAsFactors = FALSE
)
)
}
# pvals <- sapply(1:nrow(metlData_tp), function(i) {
#   t.test( metlData_tp[i, group_vec=="NIF"],
#           metlData_tp[i, group_vec=="IF"],
#           paired = FALSE )$p.value
# })
metabolites_to_remove <- scan(
"~/Roselab/Metabolite/data/data_for_analysis/metabolites_to_remove.txt",
what = character(),
sep  = "\n",
quiet= TRUE
)
# pvals <- sapply(1:nrow(metlData_tp), function(i) {
#   t.test( metlData_tp[i, group_vec=="NIF"],
#           metlData_tp[i, group_vec=="IF"],
#           paired = FALSE )$p.value
# })
metabolites_to_remove <- scan(
"~/Roselab/Metabolite/data/data_for_analysis/metabolites_to_remove.txt",
what = character(),
sep  = "\n",
quiet= TRUE
)
results <- data.frame(
Metabolite = character(),
t.stat     = numeric(),
p.value    = numeric(),
stringsAsFactors = FALSE
)
# loop over each metabolite (row)
for (i in seq_len(nrow(metlData_tp))) {
met_name <- rownames(metlData_tp)[i]
# Skip if in the removal list
if (met_name %in% metabolites_to_remove) {
cat("Skipping:", met_name, "(in removal list)\n")
next
}
group1   <- metlData_tp[i, group_vec == "NIF"]
group2   <- metlData_tp[i, group_vec == "IF"]
# 1) print the metabolite name
cat("----- Testing:", met_name, "-----\n")
# 2) print the raw values
cat("  NIF:", paste0(round(group1, 3), collapse = ", "), "\n")
cat("   IF:", paste0(round(group2, 3), collapse = ", "), "\n")
# 3) run the t-test
tt <- t.test(group1, group2, paired = FALSE)
cat(sprintf("  t = %.3f, p = %.4g\n\n", tt$statistic, tt$p.value))
# 4) append to results
results <- rbind(
results,
data.frame(
Metabolite = met_name,
t.stat     = unname(tt$statistic),
p.value    = tt$p.value,
stringsAsFactors = FALSE
)
)
}
# finally, add an FDR‐corrected column
results$FDR <- p.adjust(results$p.value, method = "fdr")
View(results)
meta_tp <- metaSubset[metaSubset$Time == "F6", ]
metlData_tp <- metlData_log2_filtered[, meta_tp$Sample_ID, drop = FALSE]
group_vec <- factor(as.character(meta_tp$Arm), levels = c("NIF", "IF"))
# Extract metabolite values (row 1) and make it numeric
met_values <- as.numeric(metlData_tp[1, ])
names(met_values) <- colnames(metlData_tp)  # keep sample IDs
# Split into two groups manually
group1 <- met_values[group_vec == "NIF"]
group2 <- met_values[group_vec == "IF"]
# Run the unpaired t-test
tt <- t.test(group1, group2, paired = FALSE)
# pvals <- sapply(1:nrow(metlData_tp), function(i) {
#   t.test( metlData_tp[i, group_vec=="NIF"],
#           metlData_tp[i, group_vec=="IF"],
#           paired = FALSE )$p.value
# })
metabolites_to_remove <- scan(
"~/Roselab/Metabolite/data/data_for_analysis/metabolites_to_remove.txt",
what = character(),
sep  = "\n",
quiet= TRUE
)
results <- data.frame(
Metabolite = character(),
t.stat     = numeric(),
p.value    = numeric(),
stringsAsFactors = FALSE
)
# loop over each metabolite (row)
for (i in seq_len(nrow(metlData_tp))) {
met_name <- rownames(metlData_tp)[i]
# Skip if in the removal list
if (met_name %in% metabolites_to_remove) {
cat("Skipping:", met_name, "(in removal list)\n")
next
}
group1   <- metlData_tp[i, group_vec == "NIF"]
group2   <- metlData_tp[i, group_vec == "IF"]
# 1) print the metabolite name
cat("----- Testing:", met_name, "-----\n")
# 2) print the raw values
cat("  NIF:", paste0(round(group1, 3), collapse = ", "), "\n")
cat("   IF:", paste0(round(group2, 3), collapse = ", "), "\n")
# 3) run the t-test
tt <- t.test(group1, group2, paired = FALSE)
cat(sprintf("  t = %.3f, p = %.4g\n\n", tt$statistic, tt$p.value))
# 4) append to results
results <- rbind(
results,
data.frame(
Metabolite = met_name,
t.stat     = unname(tt$statistic),
p.value    = tt$p.value,
stringsAsFactors = FALSE
)
)
}
# pvals <- sapply(1:nrow(metlData_tp), function(i) {
#   t.test( metlData_tp[i, group_vec=="NIF"],
#           metlData_tp[i, group_vec=="IF"],
#           paired = FALSE )$p.value
# })
metabolites_to_remove <- scan(
"~/Roselab/Metabolite/data/data_for_analysis/metabolites_to_remove.txt",
what = character(),
sep  = "\n",
quiet= TRUE
)
results <- data.frame(
Metabolite = character(),
t.stat     = numeric(),
p.value    = numeric(),
stringsAsFactors = FALSE
)
# loop over each metabolite (row)
for (i in seq_len(nrow(metlData_tp))) {
met_name <- rownames(metlData_tp)[i]
# Skip if in the removal list
if (met_name %in% metabolites_to_remove) {
cat("Skipping:", met_name, "(in removal list)\n")
next
}
group1   <- metlData_tp[i, group_vec == "NIF"]
group2   <- metlData_tp[i, group_vec == "IF"]
# 1) print the metabolite name
cat("----- Testing:", met_name, "-----\n")
# 2) print the raw values
cat("  NIF:", paste0(round(group1, 3), collapse = ", "), "\n")
cat("   IF:", paste0(round(group2, 3), collapse = ", "), "\n")
# 3) run the t-test
tt <- t.test(group1, group2, paired = FALSE)
cat(sprintf("  t = %.3f, p = %.4g\n\n", tt$statistic, tt$p.value))
# 4) append to results
results <- rbind(
results,
data.frame(
Metabolite = met_name,
t.stat     = unname(tt$statistic),
p.value    = tt$p.value,
stringsAsFactors = FALSE
)
)
}
# pvals <- sapply(1:nrow(metlData_tp), function(i) {
#   t.test( metlData_tp[i, group_vec=="NIF"],
#           metlData_tp[i, group_vec=="IF"],
#           paired = FALSE )$p.value
# })
metabolites_to_remove <- scan(
"~/Roselab/Metabolite/data/data_for_analysis/metabolites_to_remove.txt",
what = character(),
sep  = "\n",
quiet= TRUE
)
# pvals <- sapply(1:nrow(metlData_tp), function(i) {
#   t.test( metlData_tp[i, group_vec=="NIF"],
#           metlData_tp[i, group_vec=="IF"],
#           paired = FALSE )$p.value
# })
metabolites_to_remove <- scan(
"~/Roselab/Metabolite/data/data_for_analysis/metabolites_to_remove.txt",
what = character(),
sep  = "\n",
quiet= TRUE
)
results <- data.frame(
Metabolite = character(),
t.stat     = numeric(),
p.value    = numeric(),
stringsAsFactors = FALSE
)
# loop over each metabolite (row)
for (i in seq_len(nrow(metlData_tp))) {
met_name <- rownames(metlData_tp)[i]
# Skip if in the removal list
if (met_name %in% metabolites_to_remove) {
cat("Skipping:", met_name, "(in removal list)\n")
next
}
group1   <- metlData_tp[i, group_vec == "NIF"]
group2   <- metlData_tp[i, group_vec == "IF"]
# 1) print the metabolite name
cat("----- Testing:", met_name, "-----\n")
# 2) print the raw values
cat("  NIF:", paste0(round(group1, 3), collapse = ", "), "\n")
cat("   IF:", paste0(round(group2, 3), collapse = ", "), "\n")
# 3) run the t-test
tt <- t.test(group1, group2, paired = FALSE)
cat(sprintf("  t = %.3f, p = %.4g\n\n", tt$statistic, tt$p.value))
# 4) append to results
results <- rbind(
results,
data.frame(
Metabolite = met_name,
t.stat     = unname(tt$statistic),
p.value    = tt$p.value,
stringsAsFactors = FALSE
)
)
}
# take a peek
head(results)
# take a peek
head(results)
